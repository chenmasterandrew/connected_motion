#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

# import of relevant libraries.
import rospy # module for ROS APIs
import random
from std_msgs.msg import Bool
from connected_motion.msg import Points, Point2D
import networkx as nx
import re
from networkx.algorithms.approximation.steinertree import steiner_tree

# Constants.
RANDOM_WAYPOINTS_TOPIC = '/rw'
START_RANDOMIZE_TOPIC = '/sr'
MIN_X = -5
MAX_X = 5
MIN_Y = -5
MAX_Y = 5
MIN_D = 1

class Randomizer():
  def __init__(self):
    """Constructor."""

    str_nodes = rospy.get_param(rospy.get_namespace() + 'nodes')
    str_edges = rospy.get_param(rospy.get_namespace() + 'edges')

    nodes = [[float(y) for y in x.replace(")", "").split(",")] for x in re.sub("[\[\]( ]","",str_nodes).split("),")]
    edges = [[int(y) for y in x.replace(")", "").split(",")] for x in re.sub("[\[\]( ]","",str_edges).split("),")]

    print("Graph nodes:")
    print(nodes)
    print("Graph edges:")
    print(edges)
    
    self.G = nx.Graph()
    for n, [x, y] in enumerate(nodes):
      self.G.add_node(n, x=x, y=y)

    for n1, n2 in edges:
      self.G.add_edge(n1, n2)

    # Setting up publishers/subscribers
    self.__sr_sub = rospy.Subscriber(START_RANDOMIZE_TOPIC,
                                   Bool,
                                   self._sr_callback)
    self._rw_pub = rospy.Publisher(RANDOM_WAYPOINTS_TOPIC,
                                  Points,
                                  queue_size=1)
  
  def randomize(self):
    rospy.spin()

  def _get_distance(self, x1, y1, x2, y2):
    """"Utility function for getting the distance between two points (x1,y1) and (x2,y2)."""
    return abs(((x2 - x1)**2 + (y2 - y1)**2)**0.5)

  def _sr_callback(self, msg):
    """Processing of sr message."""
    print("Generating random steiner tree")
    num_terminals = random.randint(3, self.G.number_of_nodes())
    terminals = random.sample(range(self.G.number_of_nodes()), num_terminals)
    tree = steiner_tree(self.G, terminals)
    print("selected terminal nodes:")
    print(terminals)
    print("steiner tree nodes:")
    print(tree.nodes)

    points_msg = Points()
    points = []
    for n in tree.nodes:
      p = Point2D()
      p.x = tree.nodes[n]['x']
      p.y = tree.nodes[n]['y']
      points.append(p)
    points_msg.points = points

    self._rw_pub.publish(points_msg)

def main():
  """Main function."""

  # 1st. initialization of node.
  rospy.init_node("randomizer")

  # Sleep for a few seconds to wait for the registration.
  rospy.sleep(2)

  # Initialization of the class for the regular polygon motion.
  r = Randomizer()
    
  try:
    r.randomize()

  except rospy.ROSInterruptException:
    rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
  """Run the main function."""
  main()
